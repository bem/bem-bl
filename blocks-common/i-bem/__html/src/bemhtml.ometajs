ometa BEMHTMLParser <: XJSTParser {
    isKeyword = :x ?(x === 'applyCtx')
              | ^isKeyword,

    bemMatch = bemBlock | bemElem | bemMod,

    bemVal = letter:x (letter | digit | '-')+:xs -> [#string, x + xs.join('')],
    bemVal = asgnExpr,

    bemPredic :n = spaces seq(n):nn space+ -> nn,

    bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
    bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
    bemMod = bemPredic('mod') bemVal:m space+ bemVal:v -> [#blockMod, m, v],
    bemMod = bemPredic('elemMod') bemVal:m space+ bemVal:v -> [#elemMod, m, v],

    bemCustom = asgnExpr:e -> [#xjst, e],

    bemhtmlSet = spaces <letter (letter | digit | '-' | '_')*>:nn
               &(spaces ('{' | ':' | ','))
               ?(!BEMHTMLParser._isPrimitive(nn))
               -> [ nn ],

    bemMatchAndSet = bemMatch | bemhtmlSet | bemCustom,
    listBemMatchAndSet %(this.predicates = [])
        = bemMatchAndSet:t ',' listBemMatchAndSet:ts -> {
          BEMHTMLParser._applyPredicates(
              this.predicates,
              BEMHTMLParser._concatChildren(t, ts));
        } | bemMatchAndSet:t spaces '{' spaces listBemMatchAndSet+:ts spaces '}' spaces -> {
          BEMHTMLParser._applyPredicates(
              this.predicates,
              BEMHTMLParser._concatChildren(t, [#sub, ts]))
        } | bemMatchAndSet:t ':' (asgnExpr:e -> [#return, e] | stmt):c ','? -> {
          BEMHTMLParser._applyPredicates(this.predicates, [t, [#body, c]])
        },

    applyMode :type = "apply" "(" expr:e ")"
        { BEMHTMLParser._transMode(e) }:modded_e
        applyFactory([type, modded_e]):r -> r,

    applyCtx :type = "applyCtx" "(" expr:ctx ")" = {
          BEMHTMLParser._transMode([
            #binop, ',',
            [#set, [#getp, [#string, 'ctx'], [#this] ], ctx],
            [#string, '']
          ])
        }:modded_e
        applyFactory([type, #next, modded_e]):r -> r,

    primExprHd = applyMode(#expr):r -> r
               | applyCtx(#expr):r -> r
               | ^primExprHd,

    stmt       = applyMode(#stmt):r -> r
               | applyCtx(#stmt):r -> r
               | ^stmt,

    topLevel = listBemMatchAndSet*:ts spaces end -> {
      BEMHTMLParser._addElemPredic(BEMHTMLParser._dropAllSubs(ts))
    }

}

BEMHTMLParser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

BEMHTMLParser._isPrimitive = function(name) {
  return BEMHTMLParser._primitives[name];
};

BEMHTMLParser._transMode = function transMode(e) {
    function traverse(e) {
    if (e[0] !== 'binop' && e[1] !== ',') return [ e ];
    return [].concat(traverse(e[2]), traverse(e[3]));
  }

  return traverse(e).map(function (e) {
    if (e[0] !== 'string') return e;
    return [#set, [#getp, [#string, '_mode'], [#this]], e];
  }).reduce(function (acc, current) {
    return [#binop, ',', acc, current];
  });
};

BEMHTMLParser._applyPredicates = function(predicates, to) {
  if (predicates.length != 0) to.unshift(['xjst', predicates]);
  return to;
};

BEMHTMLParser._concatChildren = function(p, cs) {
    if(cs[0] === 'sub') {
        var res = [], i = 0, c;
        while(c = cs[1][i++]) {
            var cc = BEMHTMLParser._concatChildren(p, c);
            BEMHTMLParser._dropSub(res, cc);
        }
        return [#sub, res];
    } else return [p].concat(cs)
};

BEMHTMLParser._dropSub = function(buf, t) {
    t[0] === 'sub'?
        buf.push.apply(buf, t[1]) :
        buf.push(t);
};

BEMHTMLParser._dropAllSubs = function(ts) {
    var res = [], i = 0, t;
    while(t = ts[i++]) BEMHTMLParser._dropSub(res, t);
    return res;
};

BEMHTMLParser._addElemPredic = function(ts) {
    function isSafePredic(p) {
        switch (p[0]) {
          case 'get':
          case 'string':
          case 'number':
              return true;
          case 'getp':
              // Either this["some not elem property"],
              // or (some other host)["any property"]
              return p[2][0] === 'this' ?
                  p[1][0] !== 'call' &&
                  (p[1][0] !== 'string' || p[1][1] !== 'elem')
                  :
                  p[2][0] !== 'call';
          case 'unop':
              return isSafePredic(p[2]);
          case 'binop':
              return isSafePredic(p[2]) && isSafePredic(p[3]);
          default:
              return false;
        }
    }

    ts.forEach(function(t) {
        var isBlock,
        isNotElem;

        isBlock = t.some(function(p) {
            return p[0] === 'block';
        });

        if (!isBlock) return;

        isNotElem = t.every(function(p) {
            if (p[0] === 'elem' ||
                p[0] === 'xjst' && !isSafePredic(p[1])) {
                return false;
            }

            return true;
        });

        if (!isNotElem) return;

        t.unshift([
            'xjst',
            ['unop', '!', ['getp', ['string', 'elem'], ['this']]]
        ]);
    });
    return ts;
};

ometa BEMHTMLToXJST <: XJSTCompiler {

    bhPredic = [#block trans:e] -> { 'this.block === (' + e + ' )'},
    bhPredic = [#blockMod trans:m trans:v] -> { 'this.mods && this.mods[' + m + '] === (' + v + ')' },
    bhPredic = [#elem trans:e] -> { 'this.elem === (' + e  + ')' },
    bhPredic = [#elemMod trans:m trans:v] -> { 'this.elemMods && this.elemMods[' + m + '] === (' + v + ')' },
    bhPredic = [#xjst trans:e] -> { '(' + e + ')' },
    bhPredic = [:m] -> { 'this._mode === "' + m + '"' },

    bhBody = [#body tBody:b] -> { '{ ' + b + ' }' },

    bhTemplate = [bhPredic+:ps bhBody:b] -> { 'template((' + ps.join(') && (') + ')) ' + b },

    topLevel = [bhTemplate+:ts] -> ts.join('\n\n'),
    topLevel = bhTemplate:t -> t,
    topLevel = empty -> 'template(true){}'

}

ometa BXJSTIdentity <: BSJSIdentity {
    const = [#string :s] | [#number :n],

    extends :filename -> [#extends, filename],

    superStmt :op -> [#superStmt, op],
    superExpr :op -> [#superExpr, op],

    nhApplyStmt :p -> [#nhApplyStmt, p],
    nhApplyExpr -> [#nhApplyExpr],
    applyStmt :p -> [#applyStmt, p],

    localStmt trans:as trans:t -> [#localStmt, as, t],
    localExpr trans:as trans:t -> [#localExpr, as, t],

    template trans:m trans:b -> [#template, m, b]
}

ometa BEMHTMLLogLocal <: BXJSTIdentity {
  // local(...) ... => if (this._localLog) { log; local(...) ... } else { ... }
  localStmt trans:a trans:t logChanges(#stmt, a, t):log -> {
    [#if, [#getp, [#string, '_localLog'], [#get, '__this']],
       log,
       [ #begin, [#localStmt, a, t] ]
    ]
  },

  // local(...) ... => this._localLog ? (log, local(...) ... ) : ...
  localExpr trans:a trans:t logChanges(#expr, a, t):log -> {
    [#condExpr, [#getp, [#string, '_localLog'], [#get, '__this']],
      log,
      [#localExpr, a, t]
    ]
  },

  transChange = [#set [(#get :v | #getp :p :v)] :v]:e -> e,

  transJsonChange = [#binding :k :v] transChange([
                      #set,
                      [#getp, [#string, k], [#get, '__this']],
                      v
                    ]):r -> r,

  transChanges = [#json transJsonChange*:pairs] -> pairs
               | [#binop ',' transChanges:left transChange:right] -> {
                   left.concat([ right ]);
                 }
               | transChange:r -> [ r ],

  // Translate simple changes into one `push` call
  logChanges :type transChanges:changes :body -> {
    var self = this,
        localLog = [#getp, [#string, '_localLog'], [#get, '__this']],
        prelude = [],
        args = [];

    changes = changes.map(function(change) {
      function flatten(property) {
        var result = [],
            curr = property;

        while (true) {
          if (curr[0] !== 'getp' && curr[0] !== 'this' &&
              (curr[0] !== 'get' || curr[1] !== '__this')) {
            return false;
          }

          if (curr[0] === 'get' || curr[0] === 'this' || curr[0] === 'string') {
            break;
          }

          result.push(curr[1]);
          curr = curr[2];
        }

        return result.reverse();
      }

      var property = flatten(change[1]),
          value = change[2];

      // We're logging only local(this.x = ...) cases
      // (No this.ctx.a = ... and etc)
      if (!property || property.length === 0 ||
          property[0][0] === 'string' && property[0][1] === 'ctx') {
        return change;
      }

      // Replace all properties with side-effects
      property = property.map(function(property) {
        if (property[0] === 'string') return property;

        var tmp = self.getVar();

        prelude.push([#set, tmp, property]);

        return tmp;
      });

      // Movement case: this.a.b = this.c.d
      var propValue = flatten(value);
      if (propValue) {
        args.push([
          #arr,
          [#arr].concat(property),
          [#arr].concat(propValue)
        ]);
      } else {
        if (value[0] !== 'string' && value[0] !== 'get') {
          var tmp = self.getVar();

          prelude.push([#set, tmp, value]);
          value = tmp;
        }

        // Generic case
        args.push([
          #arr,
          [#arr].concat(property),
          value
        ]);
      }

      // Reflect property changes
      return [#set, property.reduce(function(acc, curr) {
        return [#getp, curr, acc];
      }, [#get, '__this']), value];
    });

    var local = [
      type === #stmt ? #localStmt : #localExpr,
      changes.reduce(function(prev, curr) {
        return [#binop, ',', prev, curr];
      }),
      body
    ];

    var call = [#call, [#getp, [#string, 'push'], localLog]].concat(args);

    var result;
    if (args.length !== 0) {
      // Revert everything pushed to localLog
      var reverse = [#set, localLog, [#call,
            [#getp, [#string, 'slice'], localLog], [#number, 0],
            [#number, -args.length]
          ]],
          tmp = this.getVar();

      if (type === #expr) {
        result = prelude.concat([ call, [#set, tmp, local], reverse, tmp ]);
      } else {
        result = prelude.concat([ call, local, reverse ]);
      }
    } else {
      result = prelude.concat([ local ]);
    }

    if (type == #expr) {
      return result.reduce(function(prev, curr) {
        return [#binop, ',', prev, curr];
      });
    } else {
      return [#begin].concat(result);
    }
  },

  topLevel {
    this._vars = [];
  } [trans*:ts] -> [this._vars, ts]
}

BEMHTMLLogLocal.prototype.getVar = function getVar() {
  var i = this._vars.length,
      name = '__bv' + i;

  this._vars.push(name);

  return [#get, name];
};
