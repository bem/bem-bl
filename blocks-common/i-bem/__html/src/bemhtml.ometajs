ometa BEMHTMLParser <: XJSTParser {

    bemMatch = bemBlock | bemElem | bemMod,

    bemVal = letter:x (letter | digit | '-')+:xs -> [#string, x + xs.join('')],
    bemVal = asgnExpr,

    bemPredic :n = spaces seq(n):nn space+ -> nn,

    bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
    bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
    bemMod = bemPredic('mod') bemVal:m space+ bemVal:v -> [#blockMod, m, v],
    bemMod = bemPredic('elemMod') bemVal:m space+ bemVal:v -> [#elemMod, m, v],

    bemCustom = asgnExpr:e -> [#xjst, e],

    bemhtmlSet = bhDefault | bhTag | bhAttrs | bhClass | bhBEM | bhJSAttr | bhJS | bhMix | bhContent,

    bhPredic :n = spaces seq(n):nn -> nn,

    bhDefault = bhPredic('default'):n -> [n],
    bhTag = bhPredic('tag'):n -> [n],
    bhAttrs = bhPredic('attrs'):n -> [n],
    bhClass = bhPredic('cls'):n -> [n],
    bhBEM = bhPredic('bem'):n -> [n],
    bhJS = bhPredic('js'):n -> [n],
    bhJSAttr = bhPredic('jsAttr'):n -> [n],
    bhMix = bhPredic('mix'):n -> [n],
    bhContent = bhPredic('content'):n -> [n],

    bemMatchAndSet = bemMatch | bemhtmlSet | bemCustom,
    listBemMatchAndSet = bemMatchAndSet:t ',' listBemMatchAndSet:ts -> BEMHTMLParser._concatChildren(t, ts),
    listBemMatchAndSet = bemMatchAndSet:t spaces '{' spaces listBemMatchAndSet+:ts spaces '}' spaces -> BEMHTMLParser._concatChildren(t, [#sub, ts]),
    listBemMatchAndSet = bemMatchAndSet:t ':' (asgnExpr:e -> [#return, e] | stmt):c ','? -> [t, [#body, c]],

    topLevel = listBemMatchAndSet*:ts spaces end -> BEMHTMLParser._addElemPredic(BEMHTMLParser._dropAllSubs(ts))

}

BEMHTMLParser._concatChildren = function(p, cs) {
    if(cs[0] === 'sub') {
        var res = [], i = 0, c;
        while(c = cs[1][i++]) {
            var cc = BEMHTMLParser._concatChildren(p, c);
            BEMHTMLParser._dropSub(res, cc);
        }
        return [#sub, res];
    } else return [p].concat(cs)
};

BEMHTMLParser._dropSub = function(buf, t) {
    t[0] === 'sub'?
        buf.push.apply(buf, t[1]) :
        buf.push(t);
};

BEMHTMLParser._dropAllSubs = function(ts) {
    var res = [], i = 0, t;
    while(t = ts[i++]) BEMHTMLParser._dropSub(res, t);
    return res;
};

BEMHTMLParser._addElemPredic = function(ts) {
    ts.forEach(function(t){
        var isBlock = false, isElemOrCustom = false;
        t.forEach(function(p){
            isBlock || (isBlock = p[0] === 'block');
            isElemOrCustom || (isElemOrCustom = p[0] == 'elem' || p[0] == 'xjst');
        });
        isBlock && !isElemOrCustom && t.unshift(['xjst', ['unop', '!', ['getp', ['string', 'elem'], ['this']]]]);
    });
    return ts;
};

ometa BEMHTMLToXJST <: XJSTCompiler {

    bhPredic = [#block trans:e] -> { 'this.block === ' + e },
    bhPredic = [#blockMod trans:m trans:v] -> { 'this.mods && this.mods[' + m + '] === ' + v },
    bhPredic = [#elem trans:e] -> { 'this.elem === ' + e },
    bhPredic = [#elemMod trans:m trans:v] -> { 'this.elemMods && this.elemMods[' + m + '] === ' + v },
    bhPredic = [#xjst trans:e] -> e,
    bhPredic = [:m] -> { 'this._mode === "' + m + '"' },

    bhBody = [#body tBody:b] -> { '{ ' + b + ' }' },

    bhTemplate = [bhPredic+:ps bhBody:b] -> { 'template(' + ps.join(' && ') + ') ' + b },

    topLevel = [bhTemplate+:ts] -> ts.join('\n\n'),
    topLevel = bhTemplate:t -> t,
    topLevel = empty -> 'template(true){}'

}
