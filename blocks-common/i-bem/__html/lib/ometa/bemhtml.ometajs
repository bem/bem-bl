var xjst = require('xjst'),
    XJSTParser = xjst.XJSTParser,
    XJSTIdentity = xjst.XJSTIdentity,
    Jail = require('./jail').Jail;

ometa BEMHTMLParser <: XJSTParser {
  isKeyword = :x ?(x === 'applyCtx')
            | ^isKeyword,

  bemMatch = bemBlock | bemElem | bemMod,

  bemVal = (letter | digit | '-')+:xs -> [#string, xs.join('')],
  bemVal = asgnExpr:e -> e,

  bemPredic :n = spaces seq(n):nn space+ -> nn,

  bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
  bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
  bemMod = bemPredic('mod') bemVal:m space+ bemVal:v -> [#blockMod, m, v],
  bemMod = bemPredic('elemMod') bemVal:m space+ bemVal:v -> [#elemMod, m, v],

  bemCustom = asgnExpr:e -> [#xjst, e],

  bemhtmlSet = spaces <letter (letter | digit | '-' | '_')*>:nn
               &(spaces ('{' | ':' | ','))
               ?(!BEMHTMLParser._isPrimitive(nn))
               -> [ nn ],

  bemMatchAndSet = (bemMatch | bemhtmlSet | bemCustom),
  listBemMatchAndSet %(this.predicates = []) = bemMatchAndSet:t spaces
                     ( ',' spaces listBemMatchAndSet:ts -> {
                       BEMHTMLParser._concatChildren(t, ts)
                     } | '{' spaces listBemMatchAndSet+:ts spaces '}'
                          spaces -> {
                       BEMHTMLParser._concatChildren(t, [#sub, ts])
                     } | ':' (asgnExpr:e -> [#begin, [#return, e]]
                             | stmt):c ','? ->
                       [t, [#body, Jail.match(
                         c,
                         'topLevel',
                         ['_$' + (BEMHTMLParser._jailId++).toString(36)]
                       )]]
                     ):r -> {
                       if (this.predicates.length === 0) return r;
                       BEMHTMLParser._concatChildren(
                         [#xjst, this.predicates],
                         r
                       )
                     } | stmt:r -> [#stmt, r],

  applyMode :type = "apply" "(" expr:e ")"
                    { BEMHTMLParser._transMode(e) }:modded_e
                    applyFactory([type, modded_e]):r -> r
                  | "applyNext" "(" expr:e ")"
                    { BEMHTMLParser._transMode(e) }:modded_e
                    applyFactory([type, #next, modded_e]):r -> r,

  applyCtx :type "applyCtx" "(" expr:ctx ")" = {
        BEMHTMLParser._transMode([
          #binop, ',',
          [#set, [#getp, [#string, 'ctx'], [#this] ], ctx],
          [#string, '']
        ])
      }:modded_e
      applyFactory([type, #next, modded_e]):r -> r,

  primExprHd = applyMode(#expr):r -> r
             | applyCtx(#expr):r -> r
             | ^primExprHd,

  stmt       = applyMode(#stmt):r -> r
             | applyCtx(#stmt):r -> r
             | ^stmt,

  topLevel = listBemMatchAndSet*:ts spaces end -> {
    BEMHTMLParser._addElemPredic(BEMHTMLParser._dropAllSubs(ts))
  }
}

BEMHTMLParser._jailId = 0;

BEMHTMLParser._transMode = function transMode(e) {
    function traverse(e) {
    if (e[0] !== 'binop' && e[1] !== ',') return [ e ];
    return [].concat(traverse(e[2]), traverse(e[3]));
  }

  return traverse(e).map(function (e) {
    if (e[0] !== 'string') return e;
    return [#set, [#getp, [#string, '_mode'], [#this]], e];
  }).reduce(function (acc, current) {
    return [#binop, ',', acc, current];
  });
};

BEMHTMLParser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

BEMHTMLParser._isPrimitive = function(name) {
  return BEMHTMLParser._primitives[name];
};

BEMHTMLParser._concatChildren = function(p, cs) {
  if (cs[0] !== 'sub') return [p].concat(cs);

  return [#sub, [].concat.apply([], cs[1].map(function(cs) {
    var cc = BEMHTMLParser._concatChildren(p, cs);
    return cc[0] === 'sub' ? cc[1] : [cc];
  }))];
};

BEMHTMLParser._dropAllSubs = function(ts) {
  return [].concat.apply([], ts.map(function(t) {
    return t[0] === 'sub' ? t[1] : [t];
  }));
};

BEMHTMLParser._addElemPredic = function(ts) {
  function isSafePredic(p) {
    switch (p[0]) {
      case 'get':
      case 'string':
      case 'number':
        return true;
      case 'getp':
        // Either this["some not elem property"],
        // or (some other host)["any property"]
        return p[2][0] === 'this' ?
            p[1][0] !== 'call' &&
            (p[1][0] !== 'string' || p[1][1] !== 'elem')
            :
            p[2][0] !== 'call';
      case 'unop':
        return isSafePredic(p[2]);
      case 'binop':
        return isSafePredic(p[2]) && isSafePredic(p[3]);
      default:
        return false;
    }
  }

  ts.forEach(function(t) {
    var isBlock,
        isNotElem;

    isBlock = t.some(function(p) {
      return p[0] === 'block';
    });

    if (!isBlock) return;

    isNotElem = t.every(function(p) {
      if (p[0] === 'elem' ||
          p[0] === 'xjst' && !isSafePredic(p[1])) {
        return false;
      }

      return true;
    });

    if (!isNotElem) return;

    t.unshift([
      'xjst',
      ['unop', '!', ['getp', ['string', 'elem'], ['this']]]
    ]);
  });
  return ts;
};

ometa BEMHTMLToXJST <: XJSTIdentity {
  bhPredic = [#block :e] -> [
    #binop, '===',
    [#getp, [#string, 'block'], [#this]],
    e
  ],
  bhPredic = [#blockMod :m :v] -> [
    #binop, '&&',
    [#getp, [#string, 'mods'], [#this]],
    [ #binop, '===',
      [#getp, m, [#getp, [#string, 'mods'], [#this]]],
      v
    ]
  ],
  bhPredic = [#elem :e] -> [
    #binop, '===',
    [#getp, [#string, 'elem'], [#this]],
    e
  ],
  bhPredic = [#elemMod :m :v] -> [
    #binop, '&&',
    [#getp, [#string, 'elemMods'], [#this]],
    [ #binop, '===',
      [#getp, m, [#getp, [#string, 'elemMods'], [#this]]],
      v
    ]
  ],
  bhPredic = [#xjst :e] -> e,
  bhPredic = [:m] -> [
    #binop, '===',
    [#getp, [#string, '_mode'], [#this]],
    [#string, m]
  ],

  bhBody = [#body :b] -> b,

  bhTemplate = [bhPredic+:ps bhBody:b] -> [
                #template,
                BEMHTMLToXJST.cons(ps),
                b
             ] | [#stmt anything]:r -> r,

  topLevel = [bhTemplate+:ts] -> ts,
  topLevel = bhTemplate:t -> [t],
  topLevel = end -> []
}

BEMHTMLToXJST.cons = function cons(arr) {
  return arr.reduce(function(prev, curr) {
    return ['binop', '&&', prev, curr];
  });
};

ometa BEMHTMLLogLocal <: XJSTIdentity {
  // local(...) ... => if (this._localLog) { log; local(...) ... } else { ... }
  localStmt trans:a trans:t logChanges(#stmt, a, t):log -> {
    [#if, [#getp, [#string, '_localLog'], [#get, '__$ctx']],
       log,
       [ #begin, [#localStmt, a, t] ]
    ]
  },

  // local(...) ... => this._localLog ? (log, local(...) ... ) : ...
  localExpr trans:a trans:t logChanges(#expr, a, t):log -> {
    [#condExpr, [#getp, [#string, '_localLog'], [#get, '__$ctx']],
      log,
      [#localExpr, a, t]
    ]
  },

  transChange = [#parens transChange:r] -> r
              | [#set [#parens :o]:g :v]:e transChange([#set, o, v]):r -> r
              | [#set [(#get :v | #getp :p :v)] :v]:e -> e,

  transJsonChange = [#binding :k :v] transChange([
                      #set,
                      [#getp, [#string, k], [#get, '__$ctx']],
                      v
                    ]):r -> r,

  transChanges = [#json transJsonChange*:pairs] -> pairs
               | [#binop ',' transChanges:left transChange:right] -> {
                   left.concat([ right ]);
                 }
               | [#parens transChanges:r] -> r
               | transChange:r -> [ r ],

  // Translate simple changes into one `push` call
  logChanges :type transChanges:changes :body -> {
    var self = this,
        localLog = [#getp, [#string, '_localLog'], [#get, '__$ctx']],
        prelude = [],
        args = [];

    changes = changes.map(function(change) {
      function flatten(property) {
        var result = [],
            curr = property;

        while (true) {
          if (curr[0] !== 'getp' && curr[0] !== 'this' &&
              (curr[0] !== 'get' || curr[1] !== '__$ctx')) {
            return false;
          }

          if (curr[0] === 'get' || curr[0] === 'this' || curr[0] === 'string') {
            break;
          }

          result.push(curr[1]);
          curr = curr[2];
        }

        return result.reverse();
      }

      var property = flatten(change[1]),
          value = change[2];

      // We're logging only local(this.x = ...) cases
      // (No this.ctx.a = ... and etc)
      if (!property || property.length === 0 ||
          property[0][0] === 'string' && property[0][1] === 'ctx') {
        return change;
      }

      // Replace all properties with side-effects
      property = property.map(function(property) {
        if (property[0] === 'string') return property;

        var tmp = self.getVar();

        prelude.push([#set, tmp, property]);

        return tmp;
      });

      // Movement case: this.a.b = this.c.d
      var propValue = flatten(value);
      if (propValue) {
        args.push([
          #arr,
          [#arr].concat(property),
          [#arr].concat(propValue)
        ]);
      } else {
        if (value[0] !== 'string' && value[0] !== 'get') {
          var tmp = self.getVar();

          prelude.push([#set, tmp, value]);
          value = tmp;
        }

        // Generic case
        args.push([
          #arr,
          [#arr].concat(property),
          value
        ]);
      }

      // Reflect property changes
      return [#set, property.reduce(function(acc, curr) {
        return [#getp, curr, acc];
      }, [#get, '__$ctx']), value];
    });

    var local = [
      type === #stmt ? #localStmt : #localExpr,
      changes.reduce(function(prev, curr) {
        return [#binop, ',', prev, curr];
      }),
      body
    ];

    var call = [#call, [#getp, [#string, 'push'], localLog]].concat(args);

    var result;
    if (args.length !== 0) {
      // Revert everything pushed to localLog
      var reverse = [#set, localLog, [#call,
            [#getp, [#string, 'slice'], localLog], [#number, 0],
            [#number, -args.length]
          ]],
          tmp = this.getVar();

      if (type === #expr) {
        result = prelude.concat([ call, [#set, tmp, local], reverse, tmp ]);
      } else {
        result = prelude.concat([ call, local, reverse ]);
      }
    } else {
      result = prelude.concat([ local ]);
    }

    if (type == #expr) {
      return result.reduce(function(prev, curr) {
        return [#binop, ',', prev, curr];
      });
    } else {
      return [#begin].concat(result);
    }
  },

  topLevel {
    this._vars = [];
  } [trans*:ts] -> [this._vars, ts]
}

BEMHTMLLogLocal.prototype.getVar = function getVar() {
  var i = this._vars.length,
      name = '__bv' + i;

  this._vars.push(name);

  return [#get, name];
};
