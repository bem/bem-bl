!function() {

    var BEM_ = {},
        toString = Object.prototype.toString,
        buildEscape = (function() {
            var ts = { '"': '&quot;', '&': '&amp;', '<': '&lt;', '>': '&gt;' },
                f = function(t) { return ts[t] || t };
            return function(r) {
                r = new RegExp(r, 'g');
                return function(s) { return ('' + s).replace(r, f) }
            }
        })();

    function BEMContext(context, apply_) {
        this.ctx = context;
        this.apply = apply_;
        this._buf = {};
        this._ = this;

        // Stub out fields that will be used later
        this._start = true;
        this._mode = '';
        this.block = undefined;
        this.elem = undefined;
        this.mods = undefined;
        this.elemMods = undefined;
    };

    BEMContext.prototype.isArray = function isArray(obj) {
        return toString.call(obj) === "[object Array]";
    };

    BEMContext.prototype.isSimple = function isSimple(obj) {
        var t = typeof obj;
        return t === 'string' || t === 'number' || t === 'boolean';
    };

    BEMContext.prototype.isShortTag = function isShortTag(t) {
        return SHORT_TAGS.hasOwnProperty(t);
    };

    BEMContext.prototype.extend = function extend(o1, o2) {
        if(!o1 || !o2) return o1 || o2;
        var res = {}, n;
        for(n in o1) o1.hasOwnProperty(n) && (res[n] = o1[n]);
        for(n in o2) o2.hasOwnProperty(n) && (res[n] = o2[n]);
        return res;
    };

    BEMContext.prototype.identify = (function() {
        var cnt = 0,
            id = BEM_.__id__ = (+new Date()),
            expando = '__' + id,
            get = function() { return 'uniq' + id + ++cnt; };
        return function(obj, onlyGet) {
            if(!obj) return get();
            if(onlyGet || obj[expando]) return obj[expando];
            else return (obj[expando] = get());
        };
    })();

    BEMContext.prototype.xmlEscape = buildEscape('[&<>]');
    BEMContext.prototype.attrEscape = buildEscape('["&<>]');

    BEMContext.prototype.BEM = BEM_;

    BEMContext.prototype.generateId = function generateId() {
        return this.identify(this.ctx);
    };

    BEMContext.prototype.doAsync = function(fn) {
        var ctx = {
                _mode : this._mode,
                ctx   : this.ctx,
                block : this.block,
                elem  : this.elem,
                mods  : this.mods,
                elemMods : this.elemMods
            },
            promise = Vow.invoke(fn);

        (this.__queue || (this.__queue = [])).push(promise);

        promise.always(function() {
            this._mode = ctx._mode;
            this.ctx   = ctx.ctx;
            this.block = ctx.block;
            this.elem  = ctx.elem;
            this.mods  = ctx.mods;
            this.elemMods = ctx.elemMods;
        }.bind(this));

        return promise;
    };

// Wrap xjst's apply and export our own
    exports.applyTree = BEMContext.apply = function _apply() {
        var ctx = new BEMContext(this, apply);
        return ctx.apply();
    };

    exports.applyAsync = BEMContext.applyAsync = function() {
        var queue = [],
            ctx = new BEMContext(this, apply),
            result;

        ctx.__queue = queue;

        result = ctx.apply();

        return Vow.allResolved(ctx.__queue)
            .always(function() {
                return result;
            });
    };

}();
return exports;


this._mode === '' {

    true: {
        this.ctx || (this.ctx = {});

        var vBlock = this.ctx.block,
            vElem = this.ctx.elem,
            block = this._currBlock || this.block;

        return apply({
            _mode : 'default',
            block : vBlock || (vElem ? block : undefined),
            _currBlock : (vBlock || vElem) ? undefined : block,
            elem : this.ctx.elem,
            mods : (vBlock ? this.ctx.mods : this.mods) || {},
            elemMods : this.ctx.elemMods || {}
        });
    }

    this._.isArray(this.ctx): {
        var v = this.ctx,
            l = v.length,
            i = 0,
            buf = [];

        while(i < l)
            buf.push(apply(this.ctx = v[i++]));

        return buf;
    }

    this._.isSimple(this.ctx): {
        var ctx = this.ctx;
        if(ctx && ctx !== true || ctx === 0)
            return ctx;
    }

}

default: {
    var content = apply('content');
    if(content || content === 0) {
        this.ctx.content = apply(this._mode = '', this.ctx = content);
    }
    return this.ctx;
}

content: {
    return this.ctx.content
}
